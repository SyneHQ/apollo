generator client {
    provider = "go run github.com/steebchen/prisma-client-go"
    previewFeatures = ["postgresqlExtensions"]
    binaryTargets   = ["native"]
}


datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model Connection {
  id               String       @id @default(cuid())
  name             String
  host             String? // Hostname or IP address of the database server
  port             Int? // Port number for database connection
  database         String? // Database name (optional for databases like Google Sheets)
  username         String? // Username for authentication (optional for some databases)
  password         String? // Password for authentication (optional for some databases)
  ssl              Boolean      @default(false) // Whether SSL is enabled
  createdAt        DateTime     @default(now()) // Timestamp when the connection was created
  updatedAt        DateTime     @updatedAt // Timestamp when the connection was last updated
  teamId           String? // Team association (optional)
  team             Team?        @relation(fields: [teamId], references: [id])
  sharedPages      SharedPage[] // Related shared pages
  backupCrons      BackupCron[] // Related backup cron jobs
  charts           Chart[] // Related charts
  forms            Form[] // Related forms
  tenantId         String // Tenant association (required)
  tenant           Tenant       @relation(fields: [tenantId], references: [id])
  encryptedAt      DateTime     @default(now()) // Timestamp when sensitive data was encrypted
  deletedAt        DateTime? // Timestamp when the connection was deleted (soft delete)
  deleted          Boolean      @default(false) // Soft delete flag
  importJobs       ImportJob[] // Related import jobs
  directConnection Boolean      @default(false) // Whether the connection is direct
  atlasSrv         Boolean      @default(false)
  workflows        Workflow[] // Workflows using this connection

  type DatabaseType @default(POSTGRESQL) // Type of database

  //Additional fields based on database-specific requirements

  projectId         String? // Required for BigQuery connections or mixpanel or google analytics
  sheetId           String? // Required for Google Sheets connections
  elasticSearchHost String? // Elasticsearch-specific host field
  elasticSearchPort Int? // Elasticsearch-specific port field
  region            String? // Region for cloud databases
  replicaSet        String? // Replica set for MongoDB connections
  applicationName   String? // Application name for cockroachdb connections

  stripeApiKey       String? // Stripe-specific API key
  shopifyAccessToken String? // Shopify-specific access token
  shopifyStoreName   String? // Shopify-specific store name
  filePath           String? // File path for SQLite and DuckDB connections

  isDemoDataset Boolean @default(false)

  additionalParams Json? // Additional parameters for the database connection

  alias String?

  chats               Chat[]
  tangents            Tangent[]
  queryLogs           QueryLog[]
  diagonalSource      Diagonal[] @relation("source")
  diagonalDestination Diagonal[] @relation("destination")

  @@index([name])
  @@index([teamId])
  @@map("postgoose_connections")
}

enum DatabaseType {
  POSTGRESQL // Supported by SQLAlchemy
  MYSQL // Supported by SQLAlchemy
  REDSHIFT // Supported by SQLAlchemy (via external dialect)
  SNOWFLAKE // Supported by SQLAlchemy (via external dialect)
  MONGODB // Supported by MCP Server or other APIs
  ORACLE // Supported by SQLAlchemy
  SQLSERVER // Supported by SQLAlchemy
  MARIADB // Supported by SQLAlchemy (MySQL variant)
  CLICKHOUSE // Requires external libraries or APIs
  SQLITE // Supported by DuckDB
  DATABRICKS // Requires PySpark or other APIs
  COCKROACHDB // Supported by SQLAlchemy (via external dialect)
  ELASTICSEARCH // Host, username, password, port required; read-only support in SQLAlchemy
  BIGQUERY // Requires project ID and external dialects/APIs
  GOOGLE_SHEETS // Requires sheet ID and external APIs/libraries
  CRATEDB // Requires external dialects; limited support in SQLAlchemy
  MIXPANEL // Requires external APIs/libraries
  STRIPE // Requires API key and external APIs/libraries
  SHOPIFY // Requires API key and external APIs/libraries
  GA4 // Requires API key and external APIs/libraries
  RAZORPAY // Requires API key and external APIs/libraries
  SCYLLA // Requires external dialects; limited support in SQLAlchemy
  CASSANDRA // Requires external dialects; limited support in SQLAlchemy
  DUCKDB // Requires database path and external APIs/libraries
  DYNAMODB // Requires external dialects; limited support in SQLAlchemy
  PARQUET // Requires external dialects; limited support in SQLAlchemy
  CSV // Requires file path and external APIs/libraries
  POSTHOG // Requires API key and external APIs/libraries
  ALLOYDB // Requires API key and external APIs/libraries
  CLICKHOUSE_LAMBDA // Requires function name, region, bucket name, and path
  ATHENA // Requires API key and external APIs/libraries
  TRINO // Requires API key and external APIs/libraries
  PRESTO // Requires API key and external APIs/libraries
  HIVE // Requires API key and external APIs/libraries
  H2 // Requires database path and external APIs/libraries
  IGNITE // Requires database path and external APIs/libraries
  SPARK // Requires database path and external APIs/libraries
  REDIS // Requires database path and external APIs/libraries
  SPANNER // Requires database path and external APIs/libraries
  EXASOL // Requires database path and external APIs/libraries
  SAP_HANA // Requires database path and external APIs/libraries
  SAP_ASE // Requires database path and external APIs/libraries
  DB2 // Requires database path and external APIs/libraries
  GOOGLE_ADS // Requires API key and external APIs/libraries
  FACEBOOK_ADS // Requires API key and external APIs/libraries
  SALESFORCE // Requires API key and external APIs/libraries
  AMAZON_ADS // Requires API key and external APIs/libraries
  FACEBOOK_PAGES
  ZOHO_BOOKS
  DBT_CLOUD
  TABLEAU
  ZOHO_CRM
  ZOHO_INVOICES
}

model QueryLog {
  id           String         @id @default(cuid())
  query        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  deleted      Boolean        @default(false)
  resultCount  Int
  resultSize   Int
  duration     Int
  status       QueryLogStatus @default(PENDING)
  error        String?
  connectionId String?
  connection   Connection?    @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  tangentId    String?
  tangent      Tangent?       @relation(fields: [tangentId], references: [id], onDelete: Cascade)
  userId       String?
  user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiKeyId     String?
  apiKey       APIKey?        @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@map("postgoose_query_logs")
}

enum QueryLogStatus {
  PENDING
  SUCCESS
  ERROR
}

model SavedQuery {
  id          String    @id @default(cuid())
  name        String
  description String?
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  query       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deletedAt   DateTime?
  deleted     Boolean   @default(false)

  @@index([name])
  @@map("postgoose_saved_queries")
}

model User {
  id                 String                  @id @default(cuid())
  email              String                  @unique
  name               String
  image              String?                 @default("https://api.dicebear.com/9.x/thumbs/svg?seed=Aidan")
  password           String?
  twoFactorEnabled   Boolean                 @default(false)
  twoFactorSecret    String?
  backupCodes        String?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  role               TeamRole                @default(MEMBER)
  queries            SavedQuery[]
  actionLogs         ActionLog[]
  status             user_status             @default(ACTIVE)
  sessions           UserSession[]
  invites            TeamInvites[]
  teams              UserTeam[]
  sharedPages        SharedPage[]
  dashboards         Dashboard[]
  forms              Form[]
  preferences        UserPreferences[]
  resetTokens        ResetToken[]
  deletedAt          DateTime?
  deleted            Boolean                 @default(false)
  chats              Chat[]
  suggestions        Suggestion[]
  documents          Document[]
  notificationTokens UserNotificationToken[]
  sharedTableUsers   SharedTableUsers[]
  accounts           Account[]
  emailVerified      DateTime?               @map("email_verified")
  workflows          Workflow[] // Workflows created by this user
  // Optional for WebAuthn support
  Authenticator      Authenticator[]

  queryLogs           QueryLog[]
  files               File[]

  //
  blockComments       BlockComments[]
  blockCommentsSeenBy BlockComments[] @relation("BlockCommentsSeenBy")

  @@index([email])
  @@map("postgoose_users")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @map("id_token")
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("postgoose_accounts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum user_status {
  ACTIVE
  INACTIVE
}

model ResetToken {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  expiresAt DateTime
  deletedAt DateTime?
  deleted   Boolean   @default(false)

  @@index([userId])
  @@map("postgoose_reset_tokens")
}

model UserPreferences {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  homeView    HomeView   @default(DASHBOARDS)
  dashboardId String?
  dashboard   Dashboard? @relation(fields: [dashboardId], references: [id])
  deletedAt   DateTime?
  deleted     Boolean    @default(false)

  @@index([userId])
  @@map("postgoose_user_preferences")
}

enum HomeView {
  DASHBOARDS
  DASHBOARD
}

model TeamInvites {
  id            String        @id @default(cuid())
  email         String
  name          String
  teamId        String
  team          Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  invitedBy     String
  status        invite_status @default(PENDING)
  role          TeamRole      @default(MEMBER)
  expiresAt     DateTime
  invitedByUser User          @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  deletedAt     DateTime?
  deleted       Boolean       @default(false)

  @@index([email])
  @@map("postgoose_team_invites")
}

enum Role {
  USER
  SUPER_ADMIN
  ADMIN
}

enum invite_status {
  PENDING
  ACCEPTED
  REJECTED
}

model UserSession {
  id           String    @id @default(cuid())
  userId       String
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  deleted      Boolean   @default(false)

  @@index([sessionToken])
  @@map("postgoose_user_sessions")
}

model ActionLog {
  id        String    @id @default(cuid())
  userId    String
  action    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  query     String
  deletedAt DateTime?
  deleted   Boolean   @default(false)

  @@map("postgoose_action_logs")
}

model Team {
  id                   String                 @id @default(cuid())
  name                 String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  connections          Connection[]
  invites              TeamInvites[]
  users                UserTeam[]
  storageDestinations  StorageDestination[]
  notificationSettings NotificationSettings[]
  dashboards           Dashboard[]
  forms                Form[]
  savedQueries         SavedQuery[]
  securitySettings     TeamSecuritySettings?
  tenant               Tenant?
  deletedAt            DateTime?
  deleted              Boolean                @default(false)
  knowledgeBases       KnowledgeBase[]
  industry             String?                @default("SaaS")
  size                 String?                @default("1-10")
  useCase              String?                @default("Business Intelligence")
  description          String?                @default("")
  prompts              Prompt[]
  integrations         Integration[]
  workflows            Workflow[] // Workflows belonging to this team
  tangents             Tangent[]
  files                File[]
  isOnboarded          Boolean                @default(false) @map("isOnboarded")
  diagonals            Diagonal[]
  apiKeys              APIKey[]
  dataLabs             DataLab[]
}

model UserTeam {
  id        String    @id @default(cuid())
  userId    String
  teamId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  role      TeamRole  @default(MEMBER)
  workRole  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
  @@map("postgoose_user_teams")
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  SUPER_ADMIN
  BOT
}

model SmtpSettings {
  id        String    @id @default(cuid())
  host      String
  port      Int
  username  String
  secure    Boolean   @default(false)
  FROM      String?   @map("from")
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)

  @@map("postgoose_smtp_settings")
}

model SharedPage {
  id            String                 @id @default(cuid())
  name          String
  description   String?
  slug          String                 @unique
  connectionId  String
  connection    Connection             @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  SCHEMA        String                 @map("schema")
  table         String
  query         String? // Pre-applied query
  isPublic      Boolean                @default(false)
  password      String? // Optional password for protection
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  createdBy     String
  user          User                   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  permissions   SharedPagePermission[]
  views         SharedPageView[]
  viewName      String
  deletedAt     DateTime?
  deleted       Boolean                @default(false)
  sharedToUsers SharedTableUsers[]

  @@index([slug])
  @@index([connectionId])
  @@map("postgoose_shared_pages")
}

model SharedTableUsers {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedPageId String
  sharedPage   SharedPage @relation(fields: [sharedPageId], references: [id], onDelete: Cascade)
}

model SharedPagePermission {
  id         String         @id @default(cuid())
  pageId     String
  page       SharedPage     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  field      String // Field name
  permission PermissionType
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?
  deleted    Boolean        @default(false)

  @@unique([pageId, field])
  @@map("postgoose_shared_page_permissions")
}

model SharedPageView {
  id        String     @id @default(cuid())
  pageId    String
  page      SharedPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  ipAddress String
  userAgent String
  viewedAt  DateTime   @default(now())
  deletedAt DateTime?
  deleted   Boolean    @default(false)

  @@index([pageId])
  @@map("postgoose_shared_page_views")
}

model StorageDestination {
  id          String       @id @default(cuid())
  name        String
  type        String       @default("s3") // Type of storage (s3, etc)
  bucket      String // S3 bucket name
  region      String // AWS region
  accessKey   String // AWS access key
  secretKey   String // AWS secret key
  endpoint    String? // Optional custom endpoint for S3-compatible services
  pathPrefix  String? // Optional path prefix within bucket
  isPublic    Boolean      @default(false) // Whether files are publicly accessible
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teamId      String
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  backupCrons BackupCron[]
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  deletedAt   DateTime?
  deleted     Boolean      @default(false)
  files       File[]

  @@map("postgoose_storage_destinations")
}

model BackupCron {
  id             String             @id @default(cuid())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  connectionId   String
  connection     Connection         @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  cronExpression String
  lastRunAt      DateTime?
  nextRunAt      DateTime?
  status         BackupCronStatus   @default(SCHEDULED)
  error          String?
  destinationId  String
  destination    StorageDestination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  backups        Backups[]
  options        Json
  deletedAt      DateTime?
  deleted        Boolean            @default(false)

  @@map("postgoose_backup_crons")
}

model Backups {
  id           String           @id @default(cuid())
  backupCronId String
  backupCron   BackupCron       @relation(fields: [backupCronId], references: [id], onDelete: Cascade)
  status       BackupCronStatus @default(SCHEDULED)
  error        String?
  key          String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  deletedAt    DateTime?
  deleted      Boolean          @default(false)

  @@map("postgoose_backups")
}

model Notification {
  id         String                  @id @default(cuid())
  type       NotificationType
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  data       Json
  settingsId String
  settings   NotificationSettings    @relation(fields: [settingsId], references: [id], onDelete: Cascade)
  status     NotificationStatus      @default(PENDING)
  error      String?
  deletedAt  DateTime?
  deleted    Boolean                 @default(false)
  seenBy     UserNotificationToken[]

  @@map("postgoose_notifications")
}

model UserNotificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id])
  notifications Notification[]

  @@index([userId])
  @@index([token])
}

model NotificationSettings {
  id            String                  @id @default(cuid())
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  type          NotificationType
  teamId        String
  team          Team                    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  enabled       Boolean                 @default(false)
  webhookUrl    String?
  receiver      NotificationDestination @default(DISCORD)
  notifications Notification[]
  deletedAt     DateTime?
  deleted       Boolean                 @default(false)
  default       Boolean                 @default(false)

  @@map("postgoose_notification_settings")
}

enum NotificationDestination {
  SLACK
  SLACK_BOT
  DISCORD
  SYNE_APP
  EMAIL
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum BackupCronStatus {
  SCHEDULED
  RUNNING
  COMPLETED
  FAILED
}

enum NotificationType {
  BACKUP_COMPLETED
  BACKUP_FAILED
  BACKUP_SCHEDULED
  BACKUP_RUNNING
  IMPORT_COMPLETED
  IMPORT_FAILED
  IMPORT_SCHEDULED
  IMPORT_RUNNING
  CONNECTION_CREATED
  CONNECTION_DELETED
  CONNECTION_UPDATED
}

enum PermissionType {
  READ
  WRITE
  NONE
}

model Dashboard {
  id          String            @id @default(cuid())
  name        String
  description String?
  teamId      String
  team        Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   String
  user        User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  charts      Chart[]
  preferences UserPreferences[]
  deletedAt   DateTime?
  deleted     Boolean           @default(false)
  favorite    Boolean           @default(false)
  settings    Json              @default("{}")
  blocks      DashboardBlock[]
  // Auto refresh configuration
  autoRefreshEnabled          Boolean @default(false)
  autoRefreshIntervalSeconds  Int?
  // Variables configuration (Metabase-like dashboard variables)
  variables DashboardVariable[]

  @@index([teamId])
  @@map("postgoose_dashboards")
}

model DashboardBlock {
  id          String          @id @default(cuid())
  dashboardId String?         @unique
  dashboard   Dashboard?      @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  type        BlockType       @default(markdown)
  content     String          @default("")
  position    Json            @default("{\"x\": 0, \"y\": 0, \"w\": 6, \"h\": 4}")
  comments    BlockComments[]

  @@map("postgoose_markdown_blocks")
}

enum BlockType {
  markdown
  iframe
  sql
  python
  chart
}

model Chart {
  id           String        @id @default(cuid())
  name         String
  description  String?
  type         ChartType
  chatId       String?
  chat         Chat?         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  dashboardId  String?
  dashboard    Dashboard?    @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  connectionId String?
  connection   Connection?   @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  tangentId    String?
  tangent      Tangent?      @relation(fields: [tangentId], references: [id], onDelete: Cascade)
  query        String?
  data         Json?
  config       Json          @default("{}")
  position     Json          @default("{\"x\": 0, \"y\": 0, \"w\": 6, \"h\": 4}")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  deleted      Boolean       @default(false)
  blockId      String?
  block        DataLabBlock? @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@index([dashboardId])
  @@map("postgoose_charts")
}

enum ChartType {
  BAR
  LINE
  PIE
  TABLE
  AREA
  SCATTER
  COMPOSED
  RADAR
  TREEMAP
  GEO
  GEOSERIES
  SANKEY
  HEATMAP
  FUNNEL
  KPI
  BOXPLOT
}

// Variable support for Dashboards
enum DashboardVariableType {
  STRING
  NUMBER
  BOOLEAN
  DATE
  DATETIME
  ENUM
}

model DashboardVariable {
  id           String                 @id @default(cuid())
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  deletedAt    DateTime?
  deleted      Boolean                @default(false)

  // Association
  dashboardId  String
  dashboard    Dashboard              @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  // Definition
  name         String                 // unique within a dashboard; used in queries like {{name}}
  label        String?
  type         DashboardVariableType  @default(STRING)
  required     Boolean                @default(false)
  defaultValue String?
  options      Json?                  // for ENUM or providing suggested values
  metadata     Json?                  // any renderer hints (e.g., UI control, format)

  @@unique([dashboardId, name])
  @@index([dashboardId])
  @@map("postgoose_dashboard_variables")
}

model Form {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  name         String
  description  String?
  slug         String           @unique
  fields       Json // Array of form fields
  table        String // Table name to store submissions
  connectionId String
  connection   Connection       @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  createdBy    String
  teamId       String
  user         User             @relation(fields: [createdBy], references: [id])
  team         Team             @relation(fields: [teamId], references: [id])
  submissions  FormSubmission[]
  headerImage  String?
  theme        String           @default("light")
  deletedAt    DateTime?
  deleted      Boolean          @default(false)

  @@index([createdBy])
  @@index([teamId])
}

model FormSubmission {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  formId    String
  data      Json // Submitted form data
  form      Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
  deletedAt DateTime?
  deleted   Boolean   @default(false)

  @@index([formId])
}

model TeamSecuritySettings {
  id         String          @id @default(cuid())
  teamId     String          @unique
  team       Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  require2FA Boolean         @default(false)
  allowedIPs TeamAllowedIP[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  deletedAt  DateTime?
  deleted    Boolean         @default(false)

  @@map("postgoose_team_security_settings")
}

model TeamAllowedIP {
  id                 String               @id @default(cuid())
  securitySettingsId String
  securitySettings   TeamSecuritySettings @relation(fields: [securitySettingsId], references: [id], onDelete: Cascade)
  ipAddress          String
  description        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  deleted            Boolean              @default(false)

  @@map("postgoose_team_allowed_ips")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  kmsKeyId  String // Google Cloud KMS key name
  status    String   @default("ACTIVE") // ACTIVE, SUSPENDED, DELETED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-one relation with Team
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @unique // Make this unique for one-to-one relation

  provider String @default("GOOGLE") // GOOGLE, SYNE

  // Relations
  connections         Connection[]
  storageDestinations StorageDestination[]
  encryptionAuditLog  EncryptionAuditLog[]
  deletedAt           DateTime?
  deleted             Boolean              @default(false)

  @@index([kmsKeyId])
  @@map("tenants")
}

// Optional: Audit log for encryption operations
model EncryptionAuditLog {
  id           String    @id @default(cuid())
  tenantId     String
  operation    String // ENCRYPT, DECRYPT, KEY_ROTATION
  resourceType String // Connection, etc.
  resourceId   String
  keyId        String
  keyVersion   Int
  status       String // SUCCESS, FAILED
  errorMessage String?
  createdAt    DateTime  @default(now())
  performedBy  String
  deletedAt    DateTime?
  deleted      Boolean   @default(false)

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([tenantId, operation])
  @@index([createdAt])
  @@index([status])
  @@map("encryption_audit_logs")
}

model Chat {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  deleted        Boolean         @default(false)
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  description    String?
  messages       Message[]
  votes          Vote[]
  visibility     VisibilityType  @default(PRIVATE)
  semanticModels SemanticModel[]
  streams        Stream[]
  charts         Chart[]
  tangentId      String?
  tangent        Tangent?        @relation(fields: [tangentId], references: [id], onDelete: Cascade)
  connectionId   String?
  connection     Connection?     @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  isV2           Boolean         @default(false)
  dataLabs       DataLab[]
}

enum VisibilityType {
  PUBLIC
  PRIVATE
  SLACK
}

model Message {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deleted     Boolean   @default(false)
  chatId      String
  chat        Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role        String
  votes       Vote[]
  attachments Json?
  duration    Int?      @default(1)
  parts       Json?
}

model Prompt {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deleted     Boolean   @default(false)
  name        String
  description String?
  content     String
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Vote {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
  messageId String
  chatId    String
  chat      Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  isUpvoted Boolean   @default(false)
}

enum DocumentKind {
  TEXT
  CODE
  SHEET
  IMAGE
  CHART
}

model Suggestion {
  id                String    @id @default(cuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
  deleted           Boolean   @default(false)
  documentId        String
  document          Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentCreatedAt DateTime
  originalText      String
  suggestedText     String
  updatedText       String
  description       String?
  isResolved        Boolean   @default(false)
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Document {
  id          String       @id @default(cuid())
  title       String
  kind        DocumentKind
  content     Json
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  deleted     Boolean      @default(false)
  suggestions Suggestion[]
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model File {
  id                   String             @id @default(cuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  deletedAt            DateTime?
  deleted              Boolean            @default(false)
  path                 String
  name                 String
  type                 String
  size                 Int
  documents            SemanticModel[]
  storageDestination   StorageDestination @relation(fields: [storageDestinationId], references: [id], onDelete: Cascade)
  storageDestinationId String
  teamId               String
  team                 Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  uploadedBy           String
  uploadedByUser       User               @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
}

model KnowledgeBase {
  id          String          @id @default(cuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
  deleted     Boolean         @default(false)
  documents   SemanticModel[]
  title       String
  teamId      String
  team        Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  description String
}

model SemanticModel {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deleted     Boolean   @default(false)
  title       String    @default("Awesome Document")
  description String    @default("This is an awesome document")

  // Store foreign keys as simple strings to avoid circular references
  connectionId    String?
  chatId          String?
  fileId          String?
  knowledgeBaseId String?
  tangentId       String?

  lastUpdated   DateTime?         @default(now())
  content       String            @default("")
  small_context String            @default("")
  createdByUser Boolean           @default(false)
  type          SemanticModelType @default(SEMANTIC)
  editorData    Json?
  metadata      Json?

  // Keep only the embeddings relation (one-to-many, less problematic)
  embeddings    Embeddings[]
  file          File?          @relation(fields: [fileId], references: [id], onDelete: Cascade)
  chat          Chat?          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  knowledgeBase KnowledgeBase? @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
}

enum SemanticModelType {
  DATABASE
  SEMANTIC
}

model DocumentPage {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  deleted    Boolean      @default(false)
  content    String
  pageNumber Int
  embeddings Embeddings[]
}

model Embeddings {
  id             String                 @id @default(cuid())
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  deletedAt      DateTime?
  deleted        Boolean                @default(false)
  resourceId     String
  resource       SemanticModel          @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  content        String
  vector         Unsupported("vector")? // Actual pgvector field
  documentPageId String?
  documentPage   DocumentPage?          @relation(fields: [documentPageId], references: [id], onDelete: Cascade)
}

model ImportJob {
  id           String          @id @default(cuid())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deletedAt    DateTime?
  taskId       String
  tableName    String
  SCHEMA       String          @map("schema")
  database     String
  deleted      Boolean         @default(false)
  status       ImportJobStatus @default(PENDING)
  data         String
  connectionId String
  connection   Connection      @relation(fields: [connectionId], references: [id], onDelete: Cascade)
}

enum ImportJobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

model Stream {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
  chatId    String
  chat      Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Integration {
  id           String            @id @default(cuid())
  type         IntegrationType
  teamId       String
  team         Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  status       IntegrationStatus @default(PENDING)
  accessToken  String? // Encrypted bot token
  refreshToken String?
  botUserId    String? // Bot user ID
  teamName     String? // Slack workspace name
  slackTeamId  String? // Slack team ID
  scopes       String[] // Granted permissions
  channels     Json? // Selected channels for notifications
  webhookUrl   String?
  metadata     Json? // Additional workspace info
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  deletedAt    DateTime?
  deleted      Boolean           @default(false)
  workflows    Workflow[] // Workflows using this integration

  @@index([teamId, type])
  @@map("postgoose_integrations")
}

enum IntegrationType {
  SLACK
  DISCORD
}

enum IntegrationStatus {
  PENDING
  ACTIVE
  EXPIRED
  REVOKED
  ERROR
}

model Workflow {
  id           String      @id @default(cuid())
  name         String
  description  String?
  teamId       String
  team         Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId       String // Creator of the workflow
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  connectionId String? // Database connection to run queries against
  connection   Connection? @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  tangentId    String? // Tangent to run queries against
  tangent      Tangent?    @relation(fields: [tangentId], references: [id], onDelete: Cascade)

  // Query configuration
  plainEnglishQuery String? // Original plain English query
  sqlQuery          String // Generated or provided SQL query

  // Schedule configuration
  scheduleType   WorkflowScheduleType
  cronExpression String? // For custom cron schedules
  timezone       String               @default("UTC")

  // Notification configuration
  slackChannelId   String? // Slack channel to send results to
  slackChannelName String? // Human readable channel name
  integrationId    String? // Reference to Slack integration
  integration      Integration? @relation(fields: [integrationId], references: [id])
  email            String? // Email to send results to

  // Status and metadata
  isActive  Boolean   @default(true)
  lastRunAt DateTime?
  nextRunAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)

  // Relations
  executions WorkflowExecution[]

  @@index([teamId])
  @@index([userId])
  @@index([connectionId])
  @@index([isActive])
  @@index([nextRunAt])
  @@map("postgoose_workflows")
}

model WorkflowExecution {
  id         String   @id @default(cuid())
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  // Execution details
  status      WorkflowExecutionStatus
  startedAt   DateTime                @default(now())
  completedAt DateTime?
  duration    Int? // Duration in milliseconds

  // Query execution
  sqlQuery     String // SQL query that was executed
  resultCount  Int? // Number of rows returned
  resultData   Json? // Query results (limited for storage)
  errorMessage String? // Error message if execution failed

  // Notification details
  slackMessageSent Boolean @default(false)
  slackMessageId   String? // Slack message ID for reference
  slackError       String? // Slack notification error if any

  // Metadata
  triggeredBy WorkflowTriggerType @default(SCHEDULE)
  metadata    Json? // Additional execution metadata

  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
  @@map("postgoose_workflow_executions")
}

enum WorkflowScheduleType {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM_CRON
}

enum WorkflowExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum WorkflowTriggerType {
  SCHEDULE
  MANUAL
  API
}

model Tangent {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  deleted     Boolean      @default(false)
  name        String
  description String?
  teamId      String
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  cords       Connection[]
  workflows   Workflow[]
  queryLogs   QueryLog[]
  chats       Chat[]
  charts      Chart[]
  error       String?

  @@index([teamId])
  @@map("syne_tangents")
}

model Diagonal {
  id                 String                @id @default(cuid())
  name               String
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  deletedAt          DateTime?
  deleted            Boolean               @default(false)
  sourceId           String
  source             Connection            @relation(fields: [sourceId], references: [id], onDelete: Cascade, name: "source")
  destinationId      String
  destination        Connection            @relation(fields: [destinationId], references: [id], onDelete: Cascade, name: "destination")
  metadata           Json?
  jobs               DiagonalJob[]
  syncFrequency      DiagonalSyncFrequency @default(DAILY)
  syncCronExpression String?
  syncCronTimezone   String?
  trigger            DiagonalTriggerType   @default(SCHEDULE)
  type               DiagonalType
  teamId             String
  team               Team                  @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("diagonals")
}

enum DiagonalType {
  MIGRATION
  DLT

  @@map("diagonal_types")
}

enum DiagonalSyncFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  CUSTOM
  ONETIME

  @@map("diagonal_sync_frequencies")
}

enum DiagonalSyncStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED

  @@map("diagonal_sync_statuses")
}

enum DiagonalTriggerType {
  SCHEDULE
  MANUAL

  @@map("diagonal_trigger_types")
}

model DiagonalJob {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  deleted     Boolean            @default(false)
  diagonalId  String
  status      DiagonalSyncStatus @default(PENDING)
  error       String?
  jobId       String
  diagonal    Diagonal           @relation(fields: [diagonalId], references: [id], onDelete: Cascade)
  metadata    Json?
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int?

  @@map("diagonal_jobs")
}

model APIKey {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  deleted   Boolean       @default(false)
  key       String        @unique
  teamId    String
  team      Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  readOnly  Boolean       @default(true)
  expiresAt DateTime?
  usage     APIKeyUsage[]
  queryLogs QueryLog[]

  @@map("api_keys")
}

model APIKeyUsage {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
  apiKeyId  String
  endpoint  String
  metadata  Json?
  apiKey    APIKey    @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
}

model DataLab {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  deleted     Boolean        @default(false)
  name        String
  description String?
  teamId      String
  team        Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  blocks      DataLabBlock[]
  chatId      String
  chat        Chat           @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("lynx_data_labs")
}

model DataLabBlock {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  deleted       Boolean         @default(false)
  dataLabId     String
  dataLab       DataLab         @relation(fields: [dataLabId], references: [id], onDelete: Cascade)
  type          BlockType       @default(markdown)
  content       String
  metadata      Json?
  output        String?
  charts        Chart[]
  blockComments BlockComments[]

  @@map("lynx_data_lab_blocks")
}

model BlockComments {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  deleted          Boolean         @default(false)
  blockId          String?
  dashboardBlockId String?
  lab_block        DataLabBlock?   @relation(fields: [blockId], references: [id], onDelete: Cascade)
  dashboard_block  DashboardBlock? @relation(fields: [dashboardBlockId], references: [id], onDelete: Cascade)
  comment          String
  userId           String
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  seenBy           User[]          @relation("BlockCommentsSeenBy")

  @@map("block_comments")
}
