/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.1
 * source: jobs.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace jobs {
    export enum JobType {
        JOB_TYPE_ONE_TIME = 0,
        JOB_TYPE_REPEATABLE = 1
    }
    export class Resources extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cpu?: string;
            memory?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cpu" in data && data.cpu != undefined) {
                    this.cpu = data.cpu;
                }
                if ("memory" in data && data.memory != undefined) {
                    this.memory = data.memory;
                }
            }
        }
        get cpu() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set cpu(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get memory() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set memory(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            cpu?: string;
            memory?: string;
        }): Resources {
            const message = new Resources({});
            if (data.cpu != null) {
                message.cpu = data.cpu;
            }
            if (data.memory != null) {
                message.memory = data.memory;
            }
            return message;
        }
        toObject() {
            const data: {
                cpu?: string;
                memory?: string;
            } = {};
            if (this.cpu != null) {
                data.cpu = this.cpu;
            }
            if (this.memory != null) {
                data.memory = this.memory;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cpu.length)
                writer.writeString(1, this.cpu);
            if (this.memory.length)
                writer.writeString(2, this.memory);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Resources {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Resources();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cpu = reader.readString();
                        break;
                    case 2:
                        message.memory = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Resources {
            return Resources.deserialize(bytes);
        }
    }
    export class RunJobRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            job_id?: string;
            command?: string;
            args_base64?: string;
            resources?: Resources;
            type?: JobType;
            schedule?: string;
            overrides?: JobOverrides;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("job_id" in data && data.job_id != undefined) {
                    this.job_id = data.job_id;
                }
                if ("command" in data && data.command != undefined) {
                    this.command = data.command;
                }
                if ("args_base64" in data && data.args_base64 != undefined) {
                    this.args_base64 = data.args_base64;
                }
                if ("resources" in data && data.resources != undefined) {
                    this.resources = data.resources;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("schedule" in data && data.schedule != undefined) {
                    this.schedule = data.schedule;
                }
                if ("overrides" in data && data.overrides != undefined) {
                    this.overrides = data.overrides;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get job_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set job_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get command() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set command(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get args_base64() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set args_base64(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get resources() {
            return pb_1.Message.getWrapperField(this, Resources, 5) as Resources;
        }
        set resources(value: Resources) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_resources() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 6, JobType.JOB_TYPE_ONE_TIME) as JobType;
        }
        set type(value: JobType) {
            pb_1.Message.setField(this, 6, value);
        }
        get schedule() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set schedule(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get overrides() {
            return pb_1.Message.getWrapperField(this, JobOverrides, 8) as JobOverrides;
        }
        set overrides(value: JobOverrides) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_overrides() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            name?: string;
            job_id?: string;
            command?: string;
            args_base64?: string;
            resources?: ReturnType<typeof Resources.prototype.toObject>;
            type?: JobType;
            schedule?: string;
            overrides?: ReturnType<typeof JobOverrides.prototype.toObject>;
        }): RunJobRequest {
            const message = new RunJobRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.job_id != null) {
                message.job_id = data.job_id;
            }
            if (data.command != null) {
                message.command = data.command;
            }
            if (data.args_base64 != null) {
                message.args_base64 = data.args_base64;
            }
            if (data.resources != null) {
                message.resources = Resources.fromObject(data.resources);
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.schedule != null) {
                message.schedule = data.schedule;
            }
            if (data.overrides != null) {
                message.overrides = JobOverrides.fromObject(data.overrides);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                job_id?: string;
                command?: string;
                args_base64?: string;
                resources?: ReturnType<typeof Resources.prototype.toObject>;
                type?: JobType;
                schedule?: string;
                overrides?: ReturnType<typeof JobOverrides.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.job_id != null) {
                data.job_id = this.job_id;
            }
            if (this.command != null) {
                data.command = this.command;
            }
            if (this.args_base64 != null) {
                data.args_base64 = this.args_base64;
            }
            if (this.resources != null) {
                data.resources = this.resources.toObject();
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.schedule != null) {
                data.schedule = this.schedule;
            }
            if (this.overrides != null) {
                data.overrides = this.overrides.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.job_id.length)
                writer.writeString(2, this.job_id);
            if (this.command.length)
                writer.writeString(3, this.command);
            if (this.args_base64.length)
                writer.writeString(4, this.args_base64);
            if (this.has_resources)
                writer.writeMessage(5, this.resources, () => this.resources.serialize(writer));
            if (this.type != JobType.JOB_TYPE_ONE_TIME)
                writer.writeEnum(6, this.type);
            if (this.schedule.length)
                writer.writeString(7, this.schedule);
            if (this.has_overrides)
                writer.writeMessage(8, this.overrides, () => this.overrides.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RunJobRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RunJobRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.job_id = reader.readString();
                        break;
                    case 3:
                        message.command = reader.readString();
                        break;
                    case 4:
                        message.args_base64 = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.resources, () => message.resources = Resources.deserialize(reader));
                        break;
                    case 6:
                        message.type = reader.readEnum();
                        break;
                    case 7:
                        message.schedule = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.overrides, () => message.overrides = JobOverrides.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RunJobRequest {
            return RunJobRequest.deserialize(bytes);
        }
    }
    export class JobOverrides extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            args?: string[];
            env?: EnvVar[];
            resources?: Resources;
            task_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("args" in data && data.args != undefined) {
                    this.args = data.args;
                }
                if ("env" in data && data.env != undefined) {
                    this.env = data.env;
                }
                if ("resources" in data && data.resources != undefined) {
                    this.resources = data.resources;
                }
                if ("task_count" in data && data.task_count != undefined) {
                    this.task_count = data.task_count;
                }
            }
        }
        get args() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set args(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get env() {
            return pb_1.Message.getRepeatedWrapperField(this, EnvVar, 2) as EnvVar[];
        }
        set env(value: EnvVar[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get resources() {
            return pb_1.Message.getWrapperField(this, Resources, 3) as Resources;
        }
        set resources(value: Resources) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_resources() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get task_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set task_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            args?: string[];
            env?: ReturnType<typeof EnvVar.prototype.toObject>[];
            resources?: ReturnType<typeof Resources.prototype.toObject>;
            task_count?: number;
        }): JobOverrides {
            const message = new JobOverrides({});
            if (data.args != null) {
                message.args = data.args;
            }
            if (data.env != null) {
                message.env = data.env.map(item => EnvVar.fromObject(item));
            }
            if (data.resources != null) {
                message.resources = Resources.fromObject(data.resources);
            }
            if (data.task_count != null) {
                message.task_count = data.task_count;
            }
            return message;
        }
        toObject() {
            const data: {
                args?: string[];
                env?: ReturnType<typeof EnvVar.prototype.toObject>[];
                resources?: ReturnType<typeof Resources.prototype.toObject>;
                task_count?: number;
            } = {};
            if (this.args != null) {
                data.args = this.args;
            }
            if (this.env != null) {
                data.env = this.env.map((item: EnvVar) => item.toObject());
            }
            if (this.resources != null) {
                data.resources = this.resources.toObject();
            }
            if (this.task_count != null) {
                data.task_count = this.task_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.args.length)
                writer.writeRepeatedString(1, this.args);
            if (this.env.length)
                writer.writeRepeatedMessage(2, this.env, (item: EnvVar) => item.serialize(writer));
            if (this.has_resources)
                writer.writeMessage(3, this.resources, () => this.resources.serialize(writer));
            if (this.task_count != 0)
                writer.writeInt32(4, this.task_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JobOverrides {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JobOverrides();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        reader.readMessage(message.env, () => pb_1.Message.addToRepeatedWrapperField(message, 2, EnvVar.deserialize(reader), EnvVar));
                        break;
                    case 3:
                        reader.readMessage(message.resources, () => message.resources = Resources.deserialize(reader));
                        break;
                    case 4:
                        message.task_count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JobOverrides {
            return JobOverrides.deserialize(bytes);
        }
    }
    export class EnvVar extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            value?: string;
        }): EnvVar {
            const message = new EnvVar({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                value?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.value.length)
                writer.writeString(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnvVar {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnvVar();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnvVar {
            return EnvVar.deserialize(bytes);
        }
    }
    export class RunJobResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            logs?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("logs" in data && data.logs != undefined) {
                    this.logs = data.logs;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get logs() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set logs(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            logs?: string;
        }): RunJobResponse {
            const message = new RunJobResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.logs != null) {
                message.logs = data.logs;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                logs?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.logs != null) {
                data.logs = this.logs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.logs.length)
                writer.writeString(2, this.logs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RunJobResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RunJobResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.logs = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RunJobResponse {
            return RunJobResponse.deserialize(bytes);
        }
    }
    export class DeleteJobRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): DeleteJobRequest {
            const message = new DeleteJobRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteJobRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteJobRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteJobRequest {
            return DeleteJobRequest.deserialize(bytes);
        }
    }
    export class DeleteJobResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteJobResponse {
            const message = new DeleteJobResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteJobResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteJobResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteJobResponse {
            return DeleteJobResponse.deserialize(bytes);
        }
    }
    export class UpdateScheduleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            schedule?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("schedule" in data && data.schedule != undefined) {
                    this.schedule = data.schedule;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get schedule() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set schedule(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            schedule?: string;
        }): UpdateScheduleRequest {
            const message = new UpdateScheduleRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.schedule != null) {
                message.schedule = data.schedule;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                schedule?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.schedule != null) {
                data.schedule = this.schedule;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.schedule.length)
                writer.writeString(2, this.schedule);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateScheduleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateScheduleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.schedule = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateScheduleRequest {
            return UpdateScheduleRequest.deserialize(bytes);
        }
    }
    export class UpdateScheduleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateScheduleResponse {
            const message = new UpdateScheduleResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateScheduleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateScheduleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateScheduleResponse {
            return UpdateScheduleResponse.deserialize(bytes);
        }
    }
    export class ListSchedulesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ListSchedulesRequest {
            const message = new ListSchedulesRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListSchedulesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListSchedulesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListSchedulesRequest {
            return ListSchedulesRequest.deserialize(bytes);
        }
    }
    export class ScheduleItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            command?: string;
            args_base64?: string;
            cron?: string;
            resources?: Resources;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("command" in data && data.command != undefined) {
                    this.command = data.command;
                }
                if ("args_base64" in data && data.args_base64 != undefined) {
                    this.args_base64 = data.args_base64;
                }
                if ("cron" in data && data.cron != undefined) {
                    this.cron = data.cron;
                }
                if ("resources" in data && data.resources != undefined) {
                    this.resources = data.resources;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get command() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set command(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get args_base64() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set args_base64(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get cron() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set cron(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get resources() {
            return pb_1.Message.getWrapperField(this, Resources, 5) as Resources;
        }
        set resources(value: Resources) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_resources() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            name?: string;
            command?: string;
            args_base64?: string;
            cron?: string;
            resources?: ReturnType<typeof Resources.prototype.toObject>;
        }): ScheduleItem {
            const message = new ScheduleItem({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.command != null) {
                message.command = data.command;
            }
            if (data.args_base64 != null) {
                message.args_base64 = data.args_base64;
            }
            if (data.cron != null) {
                message.cron = data.cron;
            }
            if (data.resources != null) {
                message.resources = Resources.fromObject(data.resources);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                command?: string;
                args_base64?: string;
                cron?: string;
                resources?: ReturnType<typeof Resources.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.command != null) {
                data.command = this.command;
            }
            if (this.args_base64 != null) {
                data.args_base64 = this.args_base64;
            }
            if (this.cron != null) {
                data.cron = this.cron;
            }
            if (this.resources != null) {
                data.resources = this.resources.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.command.length)
                writer.writeString(2, this.command);
            if (this.args_base64.length)
                writer.writeString(3, this.args_base64);
            if (this.cron.length)
                writer.writeString(4, this.cron);
            if (this.has_resources)
                writer.writeMessage(5, this.resources, () => this.resources.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScheduleItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScheduleItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.command = reader.readString();
                        break;
                    case 3:
                        message.args_base64 = reader.readString();
                        break;
                    case 4:
                        message.cron = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.resources, () => message.resources = Resources.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScheduleItem {
            return ScheduleItem.deserialize(bytes);
        }
    }
    export class ListSchedulesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: ScheduleItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, ScheduleItem, 1) as ScheduleItem[];
        }
        set items(value: ScheduleItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof ScheduleItem.prototype.toObject>[];
        }): ListSchedulesResponse {
            const message = new ListSchedulesResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => ScheduleItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof ScheduleItem.prototype.toObject>[];
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: ScheduleItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: ScheduleItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListSchedulesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListSchedulesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ScheduleItem.deserialize(reader), ScheduleItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListSchedulesResponse {
            return ListSchedulesResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedJobsServiceService {
        static definition = {
            RunJob: {
                path: "/jobs.JobsService/RunJob",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RunJobRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RunJobRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RunJobResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RunJobResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteJob: {
                path: "/jobs.JobsService/DeleteJob",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteJobRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteJobRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteJobResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteJobResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateSchedule: {
                path: "/jobs.JobsService/UpdateSchedule",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateScheduleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateScheduleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateScheduleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateScheduleResponse.deserialize(new Uint8Array(bytes))
            },
            ListSchedules: {
                path: "/jobs.JobsService/ListSchedules",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListSchedulesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListSchedulesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListSchedulesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListSchedulesResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract RunJob(call: grpc_1.ServerUnaryCall<RunJobRequest, RunJobResponse>, callback: grpc_1.sendUnaryData<RunJobResponse>): void;
        abstract DeleteJob(call: grpc_1.ServerUnaryCall<DeleteJobRequest, DeleteJobResponse>, callback: grpc_1.sendUnaryData<DeleteJobResponse>): void;
        abstract UpdateSchedule(call: grpc_1.ServerUnaryCall<UpdateScheduleRequest, UpdateScheduleResponse>, callback: grpc_1.sendUnaryData<UpdateScheduleResponse>): void;
        abstract ListSchedules(call: grpc_1.ServerUnaryCall<ListSchedulesRequest, ListSchedulesResponse>, callback: grpc_1.sendUnaryData<ListSchedulesResponse>): void;
    }
    export class JobsServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedJobsServiceService.definition, "JobsService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        RunJob: GrpcUnaryServiceInterface<RunJobRequest, RunJobResponse> = (message: RunJobRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RunJobResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RunJobResponse>, callback?: grpc_1.requestCallback<RunJobResponse>): grpc_1.ClientUnaryCall => {
            return super.RunJob(message, metadata, options, callback);
        };
        DeleteJob: GrpcUnaryServiceInterface<DeleteJobRequest, DeleteJobResponse> = (message: DeleteJobRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteJobResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteJobResponse>, callback?: grpc_1.requestCallback<DeleteJobResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteJob(message, metadata, options, callback);
        };
        UpdateSchedule: GrpcUnaryServiceInterface<UpdateScheduleRequest, UpdateScheduleResponse> = (message: UpdateScheduleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateScheduleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateScheduleResponse>, callback?: grpc_1.requestCallback<UpdateScheduleResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateSchedule(message, metadata, options, callback);
        };
        ListSchedules: GrpcUnaryServiceInterface<ListSchedulesRequest, ListSchedulesResponse> = (message: ListSchedulesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListSchedulesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListSchedulesResponse>, callback?: grpc_1.requestCallback<ListSchedulesResponse>): grpc_1.ClientUnaryCall => {
            return super.ListSchedules(message, metadata, options, callback);
        };
    }
}
